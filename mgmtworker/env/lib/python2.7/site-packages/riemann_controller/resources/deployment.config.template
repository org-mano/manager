(amqp-queue-consumer "{{ctx.deployment.id}}-riemann" "{{ctx.deployment.id}}")

(periodically-expire {{constants.PERIODICAL_EXPIRATION_INTERVAL}} {:keep-keys [:node_id :node_name :host :service]})

{% for trigger_name, trigger in policy_triggers.iteritems()  %}

(register-policy-trigger "{{ctx.deployment.id}}" "{{trigger_name}}"
{{trigger.source}}
;New line is needed so there can be a comment in the last line of trigger source
)

{% endfor %}

(let [index (index)
      deployment-processing-queue
        (processing-queue "{{ctx.deployment.id}}" {:queue-size     1000
                                                   :core-pool-size 1
                                                   :max-pool-size  4})]
(def node-instances-stream {
  ; A map where the policies sources are stored for each
  ; group and policy and node instance.
  ; It is not thread safe
  {% for stream in streams%}
    "{{stream.metadata.group}}.{{stream.metadata.policy}}" {}
  {%endfor%}
})

(streams

(default :ttl 60 index)

{% for stream in streams %}
; group={{stream.metadata.group}}
; policy={{stream.metadata.policy}}
; policy_type={{stream.metadata.policy_type}}
; members={{stream.metadata.members | join(", ")}}
(let [ctx {:blueprint-id  "{{ctx.blueprint.id}}"
           :deployment_id "{{ctx.deployment.id}}"
           :group         "{{stream.metadata.group}}"
           :policy        "{{stream.metadata.policy}}"}
      node-started-before-workflow "{{stream.metadata.policy_properties.is_node_started_before_workflow}}"
      metadata_stream_id           "{{stream.metadata.group}}.{{stream.metadata.policy}}"
      policy_operates_on_group     (parse-boolean "{{stream.metadata.policy_properties.policy_operates_on_group}}")
      process-policy-triggers      (process-policy-triggers-stream ctx deployment-processing-queue)
      publish-policy-event         (publish-policy-event* ctx)
      publish-policy-error         (publish-policy-error* ctx)
      publish-log                  (publish-log* ctx)
      ;Default restraints values are:
      ;is_node_started_before_workflow: true
      ;interval_between_workflows: 300
      is-started-option            (or (empty? node-started-before-workflow) (parse-boolean node-started-before-workflow))
      interval-between-workflows   (or {{stream.metadata.policy_properties.interval_between_workflows}} 300)
      ; If we put these function definitions outside of this section then no events get processed
      no-concurrent-workflows      (fn [interval-between-workflows]
                                       (fn [ctx]
                                           (
                                               let [
                                                   node-id           (:node-id ctx)
                                                   trigger-timetable (.get triggers-timetable (:deployment_id ctx))
                                                   last-trigger      (.get trigger-timetable node-id)
                                                   min-interval      interval-between-workflows
                                               ]
                                               (
                                                   if (
                                                       and last-trigger (
                                                           >
                                                           (time-core/in-secs (time-core/interval last-trigger (time-core/now)))
                                                           min-interval
                                                       )
                                                   )
                                                   (.replace trigger-timetable node-id last-trigger (time-core/now))
                                                   (and (not last-trigger) (= nil (.putIfAbsent trigger-timetable node-id (time-core/now))))
                                               )
                                           )
                                       )
                                   )
      is-started                   (fn [ctx]
                                       (
                                           let [
                                               node-id               (:node-id ctx)
                                               rest-host             (or (System/getenv "REST_HOST") "127.0.0.1")
                                               tenant-id             "{{tenant_id}}"
                                               rest-protocol         "https"
                                               rest-token            "{{rest_api_token}}"
                                               raw-rest-port         (or (System/getenv "REST_PORT") "53333")
                                               rest-port             (Integer/parseInt raw-rest-port)
                                               base-uri              (str rest-protocol "://" rest-host ":" rest-port "/api/v3")
                                               node-endpoint         (str "/node-instances/" node-id)
                                               node-resource-uri     (str base-uri node-endpoint)
                                               get-node              (fn [] (clj-http.client/get node-resource-uri
                                                                       {
                                                                         :accept    :json
                                                                         :headers {"API-Authentication-Token" rest-token
                                                                                   "Tenant" tenant-id}
                                                                         :trust-store "/etc/cloudify/ssl/cloudify_internal.p12"
                                                                         :trust-store-type "pkcs12"
                                                                         :trust-store-pass "cloudify"
                                                                       }))
                                               get-state             (fn [node-response]
                                                                       (:state (cheshire.core/parse-string (:body node-response) true)))
                                               check-if-error-404    (fn [e] (= (:status (:object (.getData e))) 404))
                                           ]
                                           (try
                                               (= (get-state (get-node)) "started")
                                               (catch Exception e
                                                   (if (check-if-error-404 e) false (throw e))
                                               )
                                           ) 
                                       )
                                   )
      workflow-trigger-restraints  (concat
                                       (if is-started-option [is-started])
                                       (if (> interval-between-workflows 0) [(no-concurrent-workflows interval-between-workflows)])
                                   )
      check-restraints-and-process (check-restraints-and-process* ctx deployment-processing-queue workflow-trigger-restraints)]
  (where* (is-node-name-in {%for m in stream.metadata.members%} "{{m}}" {%endfor%})
    (exception-stream publish-policy-error
      (where policy_operates_on_group
             {{stream.data}}
             ;New line is needed so there can be a comment
             ;in the last line of policy source
             (else (sdo (fn [event]
                          (def node-instances-stream
                            (if (contains? (node-instances-stream metadata_stream_id) (:node_id event))
                              node-instances-stream
                              (assoc node-instances-stream
                                     metadata_stream_id
                                     (assoc (node-instances-stream metadata_stream_id)
                                            (:node_id event)
                                            (sdo
                                              {{stream.data}}
                                              ;New line is needed so there can be a comment
                                              ;in the last line of policy source
                                            ))))))
                        (fn [event] (((node-instances-stream metadata_stream_id) (:node_id event)) event))))))))
{% endfor %}))
