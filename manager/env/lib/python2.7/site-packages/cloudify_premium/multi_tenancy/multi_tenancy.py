########
# Copyright (c) 2016 GigaSpaces Technologies Ltd. All rights reserved
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#        http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
#    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    * See the License for the specific language governing permissions and
#    * limitations under the License.

from functools import wraps
from flask import current_app
from flask_security import current_user

from .user_manager import get_user_manager
from .group_manager import get_group_manager
from .tenant_manager import get_tenant_manager

from manager_rest.app_logging import raise_unauthorized_user_error


def check_authorization(action_name):
    """
    Decorator to make sure the current use has access to the method
    :param action_name: The name of action the user is trying to perform (for
    better error readability)
    """
    def decorator(func):
        @wraps(func)
        def wrapper(*args, **kwargs):
            if not current_user.is_admin:
                raise_unauthorized_user_error(
                    '{0} does not have privileges to {1}'.format(
                        current_user,
                        action_name
                    )
                )
            return func(*args, **kwargs)
        return wrapper
    return decorator


class MultiTenancy(object):
    def __init__(self):
        self._tenant_manager = get_tenant_manager()
        self._user_manager = get_user_manager()
        self._group_manager = get_group_manager()

    def list_tenants(self, _include, filters, pagination, sort):
        return self._tenant_manager.list_tenants(
            _include, filters, pagination, sort
        )

    @check_authorization('create tenants')
    def create_tenant(self, tenant_name):
        return self._tenant_manager.create_tenant(tenant_name)

    @check_authorization('get tenants')
    def get_tenant(self, tenant_name):
        return self._tenant_manager.get_tenant(tenant_name)

    @check_authorization('delete tenants')
    def delete_tenant(self, tenant_name):
        return self._tenant_manager.delete_tenant(tenant_name)

    @check_authorization('add users to tenants')
    def add_user_to_tenant(self, username, tenant_name):
        current_app.logger.debug('Adding user `{0}` to tenant `{1}`'
                                 .format(username, tenant_name))
        user = self._user_manager.get_user(username)
        return self._tenant_manager.add_user_to_tenant(user, tenant_name)

    @check_authorization('remove users from tenants')
    def remove_user_from_tenant(self, username, tenant_name):
        current_app.logger.debug('Removing user `{0}` to tenant `{1}`'
                                 .format(username, tenant_name))
        user = self._user_manager.get_user(username)
        return self._tenant_manager.remove_user_from_tenant(user, tenant_name)

    @check_authorization('add groups to tenants')
    def add_group_to_tenant(self, group_name, tenant_name):
        current_app.logger.debug('Adding group `{0}` to tenant `{1}`'
                                 .format(group_name, tenant_name))
        group = self._group_manager.get_group(group_name)
        return self._tenant_manager.add_group_to_tenant(group, tenant_name)

    @check_authorization('remove groups from tenants')
    def remove_group_from_tenant(self, group_name, tenant_name):
        current_app.logger.debug('Adding group `{0}` to tenant `{1}`'
                                 .format(group_name, tenant_name))
        group = self._group_manager.get_group(group_name)
        return self._tenant_manager.remove_group_from_tenant(group,
                                                             tenant_name)

    # User groups management
    @check_authorization('list user groups')
    def list_groups(self, _include, filters, pagination, sort):
        return self._group_manager.list_groups(
            _include, filters, pagination, sort
        )

    @check_authorization('create user groups')
    def create_group(self, group_name, group_ldap_dn=None):
        return self._group_manager.create_group(group_name, group_ldap_dn)

    @check_authorization('get user groups')
    def get_group(self, group_name):
        return self._group_manager.get_group(group_name)

    @check_authorization('delete user groups')
    def delete_group(self, group_name):
        return self._group_manager.delete_group(group_name)

    @check_authorization('add users to user groups')
    def add_user_to_group(self, username, group_name):
        current_app.logger.debug('Adding user `{0}` to user group `{1}`'
                                 .format(username, group_name))
        user = self._user_manager.get_user(username)
        return self._group_manager.add_user_to_group(user, group_name)

    @check_authorization('remove users from user groups')
    def remove_user_from_group(self, username, group_name):
        current_app.logger.debug('Removing user `{0}` from user group `{1}`'
                                 .format(username, group_name))
        user = self._user_manager.get_user(username)
        return self._group_manager.remove_user_from_group(user, group_name)

    # User management
    @check_authorization('get users')
    def get_user(self, username):
        return self._user_manager.get_user(username)

    @check_authorization('delete users')
    def delete_user(self, username):
        return self._user_manager.delete_user(username)

    @check_authorization('list users')
    def list_users(self, _include, filters, pagination, sort):
        return self._user_manager.list_users(
            _include, filters, pagination, sort
        )

    @check_authorization('create users')
    def create_user(self, username, password, role_name=None):
        return self._user_manager.create_user(username, password, role_name)

    @check_authorization('change user passwords')
    def set_user_password(self, username, new_password):
        return self._user_manager.set_user_password(username, new_password)

    @check_authorization('change user roles')
    def set_user_role(self, username, new_role):
        return self._user_manager.set_user_role(username, new_role)

    @check_authorization('activate a user')
    def activate_user(self, username):
        return self._user_manager.activate_user(username)

    @check_authorization('deactivate a user')
    def deactivate_user(self, username):
        return self._user_manager.deactivate_user(username)
