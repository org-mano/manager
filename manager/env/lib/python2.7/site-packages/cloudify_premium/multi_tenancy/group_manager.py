#########
# Copyright (c) 2016 GigaSpaces Technologies Ltd. All rights reserved
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
#  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  * See the License for the specific language governing permissions and
#  * limitations under the License.

from flask import current_app

from .base_manager import BaseManager

from manager_rest.storage.models import Group
from manager_rest.manager_exceptions import (ConflictError,
                                             NotFoundError,
                                             DependentExistsError)


class GroupManager(BaseManager):
    def list_groups(self, _include, filters, pagination, sort):
        return self._sm.list(
            Group,
            include=_include,
            filters=filters,
            pagination=pagination,
            sort=sort
        )

    def create_group(self, group_name, ldap_group_dn=None):
        self._validate_group_does_not_exist(group_name, ldap_group_dn)
        group = Group(name=group_name, ldap_dn=ldap_group_dn)
        group = self._sm.put(group)
        return group, 201

    def _validate_group_does_not_exist(self, group_name, ldap_group_dn):
        group = self.get_group(group_name, suppress_error=True)
        if group:
            raise ConflictError(
                'A group with the same name already exists: {0}'.format(group)
            )

        group = self._get_group_by_ldap_dn(group_name, ldap_group_dn)
        if group:
            raise ConflictError(
                'A group with the same LDAP DN already '
                'exists: {0}'.format(group)
            )

    def _get_group_by_ldap_dn(self, group_name, ldap_group_dn):
        group = None
        if ldap_group_dn:
            try:
                group = self._sm.get(
                    Group,
                    group_name,
                    filters={'ldap_dn': ldap_group_dn}
                )
            except NotFoundError:
                pass
        return group

    def add_user_to_group(self, user, group_name):
        group = self.get_group(group_name)
        if group in user.groups:
            raise ConflictError(
                'User `{0}` is already associated to group `{1}`'.format(
                    user.username, group_name
                )
            )
        user.groups.append(group)
        self._sm.update(user)
        return group

    def remove_user_from_group(self, user, group_name):
        group = self.get_group(group_name)
        if group not in user.groups:
            raise NotFoundError(
                'User `{0}` is not associated with group `{1}`'.format(
                    user.username, group_name
                )
            )
        user.groups.remove(group)
        self._sm.update(user)
        return group

    def get_group(self, group_name, suppress_error=False):
        """Return a group object by name
        """
        try:
            group = self._sm.get(
                Group,
                group_name,
                filters={'name': group_name}
            )
        except NotFoundError:
            if suppress_error:
                return None
            raise NotFoundError(
                'Requested group `{0}` not found'.format(group_name)
            )
        return group

    def delete_group(self, group_name):
        group = self.get_group(group_name)
        resources = group.tenants + group.users

        # Make sure the group is empty
        if resources:
            raise DependentExistsError(
                'Cannot delete {0} because it has resources associated '
                'with it: {1}'.format(group, resources)
            )

        return self._sm.delete(group)


def get_group_manager():
    """Get the current Flask app's group manager, create if necessary
    """
    return current_app.config.setdefault('group_manager', GroupManager())
