#########
# Copyright (c) 2016 GigaSpaces Technologies Ltd. All rights reserved
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
#  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  * See the License for the specific language governing permissions and
#  * limitations under the License.

from flask import current_app
from flask_security import current_user

from manager_rest.storage.models import Tenant
from manager_rest.manager_exceptions import (NotFoundError,
                                             ConflictError,
                                             DependentExistsError)

from .base_manager import BaseManager


class TenantManager(BaseManager):
    def create_tenant(self, tenant_name):
        tenant = self.get_tenant(tenant_name, suppress_error=True)
        if tenant:
            raise ConflictError('{0} already exists'.format(tenant))
        tenant = Tenant(name=tenant_name)
        tenant = self._sm.put(tenant)
        return tenant, 201

    def list_tenants(self, _include, filters, pagination, sort):
        self.logger.debug('list tenants request')
        if not current_user.is_admin:
            filters = filters or {}
            filters['id'] = [tenant.id for tenant in current_user.all_tenants]
        return self._sm.list(
            Tenant,
            include=_include,
            filters=filters,
            pagination=pagination,
            sort=sort
        )

    def add_user_to_tenant(self, user, tenant_name):
        current_app.logger.debug('Adding user `{0}` to tenant'
                                 .format(user.username))
        tenant = self.get_tenant(tenant_name)
        if tenant in user.tenants:
            current_app.logger.error('Adding user to tenant - '
                                     'user already in tenant')
            raise ConflictError(
                '{0} is already associated to {1}'.format(user, tenant)
            )
        user.tenants.append(tenant)
        self._sm.update(user)
        return tenant

    def remove_user_from_tenant(self, user, tenant_name):
        current_app.logger.debug('Removing user `{0}` from tenant `{1}`'
                                 .format(user.username, tenant_name))
        tenant = self.get_tenant(tenant_name)

        if tenant not in user.tenants:
            raise NotFoundError(
                'User `{0}` is not associated with tenant `{1}`'.format(
                    user.username, tenant_name
                )
            )
        user.tenants.remove(tenant)
        self._sm.update(user)
        return tenant

    def add_group_to_tenant(self, group, tenant_name):
        tenant = self.get_tenant(tenant_name)
        if tenant in group.tenants:
            raise ConflictError('Group `{0}` is already associated to tenant'
                                ' `{1}`'.format(group.name, tenant_name))
        group.tenants.append(tenant)
        self._sm.update(group)
        return tenant

    def remove_group_from_tenant(self, group, tenant_name):
        tenant = self.get_tenant(tenant_name)
        if tenant not in group.tenants:
            raise NotFoundError(
                'User `{0}` is not associated with tenant `{1}`'.format(
                    group.name, tenant_name
                )
            )
        group.tenants.remove(tenant)
        self._sm.update(group)
        return tenant

    def get_tenant(self, tenant_name, suppress_error=False):
        """Return a tenant object by name
        """
        try:
            tenant = self._sm.get(
                Tenant,
                tenant_name,
                filters={'name': tenant_name}
            )
        except NotFoundError:
            if suppress_error:
                return None
            raise NotFoundError(
                'Requested tenant `{0}` not found'.format(tenant_name)
            )
        return tenant

    def delete_tenant(self, tenant_name):
        tenant = self.get_tenant(tenant_name)
        if tenant.is_default_tenant:
            raise DependentExistsError(
                '{0} was created during bootstrap, and it cannot be '
                'deleted'.format(tenant)
            )

        resources = tenant.blueprints \
            + tenant.plugins \
            + tenant.snapshots \
            + tenant.users \
            + tenant.groups
        # Make sure the tenant is empty
        if resources:
            raise DependentExistsError(
                'Cannot delete {0} because it has resources associated '
                'with it: {1}'.format(tenant, resources)
            )

        return self._sm.delete(tenant)


def get_tenant_manager():
    """Get the current Flask app's tenant manager, create if necessary
    """
    return current_app.config.setdefault('tenant_manager', TenantManager())
