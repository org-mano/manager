#########
# Copyright (c) 2016 GigaSpaces Technologies Ltd. All rights reserved
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
#  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  * See the License for the specific language governing permissions and
#  * limitations under the License.

from flask import current_app
from flask_security.utils import encrypt_password

from .base_manager import BaseManager

from manager_rest.storage.models import User
from manager_rest.constants import USER_ROLE
from manager_rest.storage import user_datastore
from manager_rest.manager_exceptions import (BadParametersError,
                                             NotFoundError,
                                             DependentExistsError,
                                             ConflictError)


class UserManager(BaseManager):
    @staticmethod
    def get_user(username, suppress_error=False):
        user = user_datastore.get_user(username)
        if not user and not suppress_error:
            raise NotFoundError('User `{0}` not found'.format(username))
        return user

    def delete_user(self, username):
        user = self.get_user(username)
        self._assert_not_bootstrap_admin(user)
        resources = user.blueprints \
            + user.deployments \
            + user.executions \
            + user.plugins \
            + user.snapshots \
            + user.tenants \
            + user.groups
        # Make sure the user is empty
        if resources:
            raise DependentExistsError(
                'Cannot delete {0} because it has resources associated '
                'with it: {1}'.format(user, resources)
            )

        return self._sm.delete(user)

    def list_users(self, _include, filters, pagination, sort):
        return self._sm.list(
            User,
            include=_include,
            filters=filters,
            pagination=pagination,
            sort=sort
        )

    def create_user(self, username, password, role_name=None):
        user = self.get_user(username, suppress_error=True)
        if user:
            raise ConflictError('{0} already exists'.format(user))
        role = self._get_role(role_name)
        user = user_datastore.create_user(
            username=username,
            password=encrypt_password(password)
        )
        user.roles.append(role)
        user_datastore.commit()
        return user, 201

    def set_user_password(self, username, new_password):
        user = self.get_user(username)
        user.password = encrypt_password(new_password)
        user_datastore.commit()
        return user

    def set_user_role(self, username, new_role_name):
        role = self._get_role(new_role_name)
        user = self.get_user(username)
        self._assert_not_bootstrap_admin(user)
        user.roles = [role]
        user_datastore.commit()
        return user

    def activate_user(self, username):
        user = self.get_user(username)
        if user.active:
            raise ConflictError('{0} is already active'.format(user))
        user.active = True
        user_datastore.commit()
        return user

    def deactivate_user(self, username):
        user = self.get_user(username)
        if not user.active:
            raise ConflictError('{0} is already inactive'.format(user))
        user.active = False
        user_datastore.commit()
        return user

    @staticmethod
    def _get_role(role_name=None):
        role_name = role_name or USER_ROLE
        role = user_datastore.find_role(role_name)
        if not role:
            raise BadParametersError(
                'Provided role: {0} does not exist'.format(role_name)
            )
        return role

    @staticmethod
    def _assert_not_bootstrap_admin(user):
        if user.is_bootstrap_admin:
            raise BadParametersError(
                '{0} is the bootstrap admin, '
                'and it cannot be modified'.format(user)
            )


def get_user_manager():
    """Get the current Flask app's user manager, create if necessary
    """
    return current_app.config.setdefault('user_manager', UserManager())
