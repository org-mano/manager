########
# Copyright (c) 2016 GigaSpaces Technologies Ltd. All rights reserved
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#        http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
#    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    * See the License for the specific language governing permissions and
#    * limitations under the License.

import json
import logging
import subprocess

from cloudify_premium.ha import utils

logger = logging.getLogger(__name__)


def _parse_log_line(log_line):
    """
    Parse a log line from journald, or skip it if it's malformed.

    The journald json output contains several fields: __CURSOR with the cursor
    position of the current log entry, __REALTIME_TIMESTAMP with the timestamp
    when the log was generated, and MESSAGE with the actual message.
    """
    if not log_line:
        return

    try:
        log = json.loads(log_line)
    except ValueError:
        return

    # journald also includes the sudo calls made by the observed unit; let's
    # hide those
    if log.get('_COMM') == 'sudo':
        return

    if ':DEBUG:' in log.get('MESSAGE', ''):
        return

    try:
        priority = int(log.get('PRIORITY', 0))
        if priority < 7:  # journald: 7 = debug
            return {
                'cursor': log['__CURSOR'],
                'timestamp': int(log['__REALTIME_TIMESTAMP']),
                'message': log['MESSAGE'],
            }
    except (KeyError, ValueError):
        return


class SystemdManaged(object):
    """Convenience utilities for controlling the systemd units."""
    unit_source = None
    service_name = None

    @staticmethod
    def _full_service_name(service_name, append_prefix):
        if append_prefix:
            return 'cloudify-{0}'.format(service_name)
        return service_name

    @classmethod
    def run_command(cls, service_name, command, append_prefix=True,
                    sudo=False):
        unit_name = cls._full_service_name(service_name, append_prefix)

        service = cls(service_name, append_prefix=append_prefix, sudo=sudo)
        # If there was a previous attempt to run the script and it failed,
        # the unit will be in a failed state. We'll require no confirmation
        # for retrying, and just reset the failed state.
        if service.status() == 3:
            service.systemctl(['reset-failed'])
        command = ['systemd-run', '--unit', unit_name] + command
        if sudo:
            command.insert(0, 'sudo')
        try:
            subprocess.check_output(command, stderr=subprocess.STDOUT)
        except Exception as e:
            raise ValueError(e.output)
        return service

    def __init__(self, service_name=None, append_prefix=True,
                 executable=None, sudo=False, *args, **kwargs):
        if service_name is None:
            service_name = self.service_name
        self._service_name = self._full_service_name(service_name,
                                                     append_prefix)
        self._sudo = sudo

    def __repr__(self):
        return '<SystemdManaged {0}>'.format(self._service_name)

    def systemctl(self, command):
        executable = ['systemctl']
        if self._sudo:
            executable.insert(0, 'sudo')
        return subprocess.check_output(executable + command,
                                       stderr=subprocess.STDOUT)

    def configure(self, enable=True):
        unit_file = '/usr/lib/systemd/system/{0}.service'.format(
            self._service_name)
        with open(unit_file, 'w') as f:
            utils.render_resource(f, self.unit_source, obj=self)
        self.systemctl(['daemon-reload'])
        if enable:
            self.enable()

    def status(self):
        try:
            self.systemctl(['status', self._service_name])
        except subprocess.CalledProcessError as e:
            return e.returncode
        else:
            return 0

    def start(self):
        logger.debug('Starting systemd service: %s', self._service_name)
        self.systemctl(['start', self._service_name])

    def stop(self):
        logger.debug('Stopping systemd service: %s', self._service_name)
        self.systemctl(['stop', self._service_name])

    def enable(self):
        logger.debug('Enabling systemd service: %s', self._service_name)
        self.systemctl(['enable', self._service_name])

    def disable(self):
        logger.debug('Disabling systemd service: %s', self._service_name)
        self.systemctl(['disable', self._service_name])

    def restart(self):
        logger.debug('Restarting systemd service: %s', self._service_name)
        self.systemctl(['restart', self._service_name])

    def reload(self):
        logger.debug('Reloading systemd service: %s', self._service_name)
        self.systemctl(['reload', self._service_name])

    def get_journald_logs(self,
                          after_cursor=None,
                          use_json=True):
        """
        Retrieve logs for the given unit from journald.

        :param unit: name of the systemd unit to get logs for
        :param after_cursor: get logs starting from this cursor position
        :param use_json: get the logs using journald's json output,
                         and decode them to python dicts
        :param append_prefix: add the 'cloudify-' prefix to the unit name
        """
        unit = self._service_name
        command = ['journalctl', '--unit', unit, '--no-pager', '--quiet']
        if use_json:
            command.extend(['--output', 'json'])

        if after_cursor:
            command.extend(['--after-cursor', after_cursor])

        if self._sudo:
            command.insert(0, 'sudo')

        try:
            logs_result = subprocess.check_output(command)
        except subprocess.CalledProcessError:
            return []

        parsed_logs = []
        for line in logs_result.split('\n'):
            if use_json:
                log = _parse_log_line(line)
            else:
                log = line

            if log:
                parsed_logs.append(log)
        return parsed_logs
