
########
# Copyright (c) 2016 GigaSpaces Technologies Ltd. All rights reserved
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#        http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
#    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    * See the License for the specific language governing permissions and
#    * limitations under the License.

import os
import grp
import pwd
import json
import time
import stat
import logging
import requests
from xml.etree import ElementTree

from cloudify_premium.ha import (cluster_status,
                                 systemd,
                                 node_status,
                                 utils)

logger = logging.getLogger(__name__)

SYNCTHING_SERVICE_NAME = 'syncthing'
SYNCTHING_OS_USERNAME = 'cfyuser_syncthing'
SYNCTHING_API_PORT = 8384
SYNCTHING_REPLICATION_PORT = 22000
SYNCED_DIRECTORIES = [
    ('resources', '/opt/manager/resources'),
    ('mgmtworker-plugins', '/opt/mgmtworker/env/plugins'),
    ('manager-config', '/opt/manager'),
]
# files in the /opt/manager directory that will be replicated, the rest is
# ignored - we replicate the REST service security config, because the
# password salt needs to be the same on all the cluster nodes
REST_CONFIG_FILES = ['rest-security.conf']


class Syncthing(systemd.SystemdManaged):
    """Interface to the syncthing API."""
    unit_source = 'resources/cloudify-syncthing.service'
    user = SYNCTHING_OS_USERNAME

    def __init__(self,
                 home_dir='/opt/syncthing',
                 port=SYNCTHING_API_PORT,
                 *args,
                 **kwargs):
        super(Syncthing, self).__init__(service_name=SYNCTHING_SERVICE_NAME,
                                        *args, **kwargs)
        self.home_dir = home_dir
        self._config_path = os.path.join(home_dir,
                                         '.config/syncthing/config.xml')
        self._syncthing_port = port
        self._api_key = None
        self._session = None

    def _url(self, part):
        return 'http://127.0.0.1:{0}/rest/{1}'.format(
            self._syncthing_port, part)

    def start(self):
        super(Syncthing, self).start()
        self._wait_until_started()
        utils.wait_for_port('127.0.0.1', self._syncthing_port)

    @property
    def api_key(self):
        return node_status['syncthing_api_key']

    @property
    def session(self):
        if self._session is None:
            self._session = requests.Session()
            self._session.headers.update({'X-Api-Key': self.api_key})
        return self._session

    def status(self):
        return self.session.get(self._url('system/status')).json()

    def get_id(self):
        return self.status()['myID']

    def config(self):
        return self.session.get(self._url('system/config')).json()

    def update_config(self, new_config):
        config = self.config()
        config.update(new_config)
        self.session.post(self._url('system/config'), data=json.dumps(config))

    def _wait_until_started(self, retries=20, interval=1):
        for retry in range(retries):
            logger.debug('Waiting for {0} (retry {1})'
                         .format(self._config_path, retry))
            if os.path.exists(self._config_path):
                logger.debug('{0} exists!'.format(self._config_path))
                break
            time.sleep(interval)


def configure(**kwargs):
    utils.create_service_user(SYNCTHING_OS_USERNAME, '/opt/syncthing',
                              groups=['syncthing', utils.CLUSTER_OS_GROUP])
    os.chown('/opt/syncthing', pwd.getpwnam(SYNCTHING_OS_USERNAME).pw_uid,
             grp.getgrnam(utils.CLUSTER_OS_GROUP).gr_gid)
    syncthing.configure()
    # make a backup of the original rest config files before overwriting them
    for filename in REST_CONFIG_FILES:
        path = os.path.join('/opt/manager', filename)
        if utils.is_master():
            stat_result = os.stat(path)
            os.chown(path, stat_result.st_uid,
                     grp.getgrnam(utils.CLUSTER_OS_GROUP).gr_gid)
            os.chmod(path, stat_result.st_mode | stat.S_IRGRP | stat.S_IWGRP)
        else:
            os.rename(path, '{0}.old'.format(path))

    # ignore all the files in /opt/manager except for the REST service config
    # files that we want to replicate
    with open('/opt/manager/.stignore', 'w') as f:
        for filename in REST_CONFIG_FILES:
            f.write('!{0}\n'.format(filename))
        f.write('*\n')
    for _, path in SYNCED_DIRECTORIES:
        if not os.path.exists(path):
            os.makedirs(path)
        stat_result = os.stat(path)
        os.chown(path, stat_result.st_uid,
                 grp.getgrnam(utils.CLUSTER_OS_GROUP).gr_gid)
        os.chmod(path, stat_result.st_mode | stat.S_IRGRP | stat.S_IWGRP)


def start(start_retries=20, start_retry_interval=1, **kwargs):
    syncthing.start()
    with open(syncthing._config_path) as f:
        config_source = f.read()
    tree = ElementTree.fromstring(config_source)
    node_status['syncthing_api_key'] = tree.findall('.//gui/apikey')[0].text

    logger.debug('Syncthing node ID: {0}'.format(syncthing.get_id()))
    cluster_status.syncthing_nodes[node_status['name']] = {
        'id': syncthing.get_id(),
        'ip': node_status['ip'],
        'name': node_status['name']
    }
    update_devices()

    if utils.is_master():
        return

    # wait for the replication to be established - until the REST service
    # config files are copied
    for retry in range(start_retries):
        if all(os.path.exists(os.path.join('/opt/manager', filename))
               for filename in REST_CONFIG_FILES):
            break
        else:
            logger.info('Waiting for filesystem replication')
        time.sleep(start_retry_interval)
    else:
        raise RuntimeError('Unable to establish filesystem replication')


def update_devices():
    devices = []
    for syncthing_params in cluster_status.syncthing_nodes.values():
        if not syncthing_params:
            continue
        devices.append({
            'deviceID': syncthing_params['id'],
            'addresses': ['tcp://{0}'.format(syncthing_params['ip'])],
            'name': syncthing_params['name']
        })

    folders = [{
        'id': dir_id,
        'path': path,
        'rescanIntervalS': 15,
        'devices': devices,
        'ignorePerms': True
    } for dir_id, path in SYNCED_DIRECTORIES]

    syncthing.update_config({
        'devices': devices,
        'folders': folders
    })


syncthing = Syncthing()
