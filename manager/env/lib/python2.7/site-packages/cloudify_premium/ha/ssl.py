import os
import grp
import json
import stat
import logging
import tempfile
import subprocess

from cloudify_premium.ha import utils

logger = logging.getLogger(__name__)


def create_cert(ca_crt, ca_key, common_name, ip=None):
    csr_filename = _temp_filename()
    key_filename = _temp_filename()
    cert_filename = _temp_filename()

    with tempfile.NamedTemporaryFile(delete=False) as config_file:
        utils.render_resource(config_file,
                              'resources/csr_config',
                              ip=ip,
                              common_name=common_name)

    subprocess.check_output([
        'openssl', 'req',
        '-newkey', 'rsa:2048',
        '-nodes',
        '-batch',
        '-config', config_file.name,
        '-out', csr_filename,
        '-keyout', key_filename,
    ], stderr=subprocess.STDOUT)
    subprocess.check_output([
        'openssl', 'x509',
        '-days', '3650',
        '-req', '-in', csr_filename,
        '-CA', ca_crt,
        '-CAkey', ca_key,
        '-out', cert_filename,
        '-CAcreateserial',
        '-extensions', 'server_req_extensions',
        '-extfile', config_file.name
    ], stderr=subprocess.STDOUT)
    _set_permissions(cert_filename)
    _set_permissions(key_filename)
    return cert_filename, key_filename


def get_ca_cert(consul_client):
    _, response = consul_client.kv.get('ca')
    if response is None:
        raise ValueError('No CA cert generated!')
    else:
        ca_data = json.loads(response['Value'])
        ca_crt, ca_key = ca_data['cert'], ca_data['key']

        with tempfile.NamedTemporaryFile(delete=False) as ca_crt_file:
            ca_crt_file.write(ca_crt)

        with tempfile.NamedTemporaryFile(delete=False) as ca_key_file:
            ca_key_file.write(ca_key)
        ca_crt_filename = ca_crt_file.name
        ca_key_filename = ca_key_file.name
        _set_permissions(ca_crt_filename)
        _set_permissions(ca_key_filename)
    return ca_crt_filename, ca_key_filename


def store_ca_cert(consul_client, ca_crt, ca_key):
    with open(ca_crt) as f:
        ca_crt_content = f.read()

    with open(ca_key) as f:
        ca_key_content = f.read()

    consul_client.kv.put('ca', json.dumps({
        'cert': ca_crt_content,
        'key': ca_key_content
    }))


def create_ca_cert():
    cert_filename = _temp_filename()
    key_filename = _temp_filename()
    logger.debug('create_ca_cert {0} {1}'.format(cert_filename, key_filename))
    subprocess.check_output([
        'openssl', 'req',
        '-x509',
        '-nodes',
        '-newkey', 'rsa:2048',
        '-days', '3650',
        '-batch',
        '-out', cert_filename,
        '-keyout', key_filename
    ], stderr=subprocess.STDOUT)
    _set_permissions(cert_filename)
    _set_permissions(key_filename)
    return cert_filename, key_filename


def _set_permissions(filename):
    uid = os.geteuid()
    gid = grp.getgrnam(utils.CLUSTER_OS_GROUP).gr_gid
    os.chown(filename, uid, gid)
    os.chmod(filename, stat.S_IRUSR | stat.S_IWUSR | stat.S_IRGRP)


def _temp_filename():
    fd, filename = tempfile.mkstemp()
    os.close(fd)
    return filename
