########
# Copyright (c) 2016 GigaSpaces Technologies Ltd. All rights reserved
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#        http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
#    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    * See the License for the specific language governing permissions and
#    * limitations under the License.

"""An interface to the systemd services used in the manager."""

from __future__ import absolute_import

from cloudify_premium.ha import consul, node_status
from cloudify_premium.ha.systemd import SystemdManaged

SECURITY_SETTINGS_PATH = '/opt/manager/rest-security.conf'
LOGSTASH_CONFIG_PATH = '/etc/logstash/conf.d/logstash.conf'
STAGE_CONFIG_PATH = '/opt/cloudify-stage/conf/app.json'
POSTGRESQL_PGPASS = '/etc/cloudify/.pgpass'

NGINX = SystemdManaged('nginx', append_prefix=False)
RABBITMQ = SystemdManaged('rabbitmq')
AMQPINFLUX = SystemdManaged('amqpinflux')
RIEMANN = SystemdManaged('riemann')
MGMTWORKER = SystemdManaged('mgmtworker')
RESTSERVICE = SystemdManaged('restservice')
LOGSTASH = SystemdManaged('logstash', append_prefix=False)
RABBITMQ = SystemdManaged('rabbitmq')
STAGE = SystemdManaged('stage')
INFLUXDB = SystemdManaged('influxdb')


class IPtablesRestoreService(SystemdManaged):
    """Service that restores saved iptables rules on boot.

    Centos does not ship with iptables-services by default, which would
    allow persisting rules across reboots. Instead, we store the rules
    in /etc/sysconfig/iptables, and use a simple oneoff systemd script
    that will restore them on boot.
    """
    unit_source = 'resources/cloudify-iptables-restore.service'
    service_name = 'iptables-restore'


def deploy_check():
    consul.write_config_file('managerservices', {
        'service': {
            'name': 'managerservices',
            'id': 'managerservices'
        }
    })
    consul.write_config_file('manager_services_check', {
        'check': {
            'id': 'manager_services_check',
            'name': 'manager services check',
            'service_id': 'managerservices',
            'ttl': '20s'
        }
    })
    checks = node_status['checks']
    checks.update({
        'check_manager_services': 'manager_services_check',
    })
    node_status['checks'] = checks


# services that can only be running on the master, and should be stopped
# on replicas
MASTER_ONLY_SERVICES = [
    RIEMANN,
    MGMTWORKER,
    AMQPINFLUX,
    LOGSTASH,
    RESTSERVICE,
    RABBITMQ,
    INFLUXDB
]

# services that should be running on both the master, and the replicas
MASTER_REPLICA_SERVICES = [
    NGINX,
]

MANAGER_SERVICES = MASTER_ONLY_SERVICES + MASTER_REPLICA_SERVICES
