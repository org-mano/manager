########
# Copyright (c) 2016 GigaSpaces Technologies Ltd. All rights reserved
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#        http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
#    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    * See the License for the specific language governing permissions and
#    * limitations under the License.

import shutil
import logging
import pkg_resources

from cloudify_premium.ha import services

logger = logging.getLogger(__name__)
ORIGINAL_LOCATION = '/etc/nginx/conf.d/rest-location.cloudify'
BACKUP_LOCATION = '/opt/cloudify/rest-location.cloudify.backup'
INTERNAL_SSL_CERT_PATH = '/etc/cloudify/ssl/cloudify_internal_cert.pem'


def disallow_clients():
    """Block REST requests on this node.

    REST requests to endpoints that would use the database are only allowed
    on the master; all other nodes will return a 500 error, telling the client
    to update its state and query the master instead.
    """
    logger.debug('Disallowing clients')
    lock_location_filename = pkg_resources.resource_filename(
        __name__,
        'resources/rest-location-locked.cloudify')
    shutil.copy(ORIGINAL_LOCATION, BACKUP_LOCATION)
    shutil.copy(lock_location_filename, ORIGINAL_LOCATION)
    services.NGINX.reload()
    logger.info('REST requests disallowed!')


def allow_clients():
    """Stop blocking REST requests on this node."""
    logger.debug('Allowing clients')

    shutil.copy(BACKUP_LOCATION, ORIGINAL_LOCATION)
    services.NGINX.reload()
    logger.info('REST requests allowed!')


def removed_from_cluster():
    removed_location_filename = pkg_resources.resource_filename(
        __name__,
        'resources/rest-location-left.cloudify')
    shutil.copy(ORIGINAL_LOCATION, BACKUP_LOCATION)
    shutil.copy(removed_location_filename, ORIGINAL_LOCATION)
    services.NGINX.reload()
