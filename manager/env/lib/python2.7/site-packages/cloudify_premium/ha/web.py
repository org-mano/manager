########
# Copyright (c) 2016 GigaSpaces Technologies Ltd. All rights reserved
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#        http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
#    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    * See the License for the specific language governing permissions and
#    * limitations under the License.
"""
REST API adapter for the cluster.

Use the ClusterResourceBase to implement concrete REST resources, returning
responses declared by ClusterState and ClusterNode.
"""

from functools import wraps
from flask import current_app
from flask_restful import fields, Resource
from flask_restful_swagger import swagger

from .controller import ClusterController

from manager_rest.security.secured_resource import \
    authenticate_and_authorize_skip_tenant


def with_cluster_controller(f):
    """
    Pass the cluster controller into the decorated function.

    The controller will be passed by name as "cluster".
    """

    @wraps(f)
    def inner(*args, **kwargs):
        kwargs['cluster'] = ClusterController(logger=current_app.logger)
        return f(*args, **kwargs)

    return inner


class ClusterResourceBase(Resource):
    """
    Methods of this resource will have the cluster controller passed into
    them automatically.
    """
    method_decorators = [authenticate_and_authorize_skip_tenant,
                         with_cluster_controller]


@swagger.model
class ClusterState(object):
    """
    Current state of the cluster.

    Contains cluster-wide data, not specific to any one node.
    """
    resource_fields = {
        'initialized': fields.Boolean,
        'logs': fields.List(fields.Nested({
            'cursor': fields.String,
            'message': fields.String,
            'timestamp': fields.Integer
        })),
        'consul': fields.Nested({
            'leader': fields.String
        }),
        'error': fields.String
    }

    def __init__(self, **kwargs):
        for fieldname in self.resource_fields:
            setattr(self, fieldname, kwargs.get(fieldname))


@swagger.model
class ClusterNode(object):
    """
    Representation of a node in the cluster.

    Contains node-specific data and metrics.
    "master" is True if this node is the current leader of the cluster.
    "online" is True if this node is currently reachable from the other nodes.
    """
    resource_fields = {
        'master': fields.Boolean,
        'host_ip': fields.String,
        'online': fields.Boolean,
        'name': fields.String,
        'initialized': fields.Boolean,
        'credentials': fields.Raw
    }

    def __init__(self, **kwargs):
        for fieldname in self.resource_fields:
            setattr(self, fieldname, kwargs.get(fieldname))
